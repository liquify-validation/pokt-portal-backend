worker_processes auto;

events {
    worker_connections 1024;  # Maximum number of simultaneous connections per worker process
}

http {
    lua_shared_dict api_key_cache 10m;
    lua_shared_dict api_org_cache 10m;
    lua_shared_dict api_org_id_cache 10m;
    lua_shared_dict prometheus_metrics 1M;
    lua_shared_dict api_daily_count 10m;
    lua_shared_dict api_rate_limit 10m;


    upstream backend_server {
        server ${BACKEND_SERVER_IP}:${BACKEND_SERVER_PORT};
    }


    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")

        database_host = "${DB_HOST}"
        database_name = "${DB_NAME}" 
        db_username = "${DB_USERNAME}" 
        db_password = "${DB_PASSWORD}"

        metric_requests_api = prometheus:counter(
            "requests_by_api_key", "Number of HTTP requests", {"api_key", "org", "org_id", "chain", "status"}
        )

        metric_api_cache = prometheus:counter(
            "cache_hits", "Number of calls with cached API key", {"state"}
        )
    }

    server {
        listen 80;
        server_name gateway.${DOMAIN};

        location ~ ^/api=(?<api_key>\w+)$ {
            access_by_lua_block {
                local function processInternalRequest(api_key, cached_value, org, new_uri)
                    -- function to proxy requests returns response data
                    ngx.req.read_body()  -- Ensure request body is read
                    local body_data = ngx.req.get_body_data() or ""
                    local method = ngx.HTTP_GET  -- Default to GET method if not recognized

                    if ngx.var.request_method == "POST" then
                        method = ngx.HTTP_POST
                    elseif ngx.var.request_method == "PUT" then
                        method = ngx.HTTP_PUT
                    -- Add more method checks as needed (e.g., DELETE, PATCH, etc.)
                    end

                    local res = ngx.location.capture(new_uri, {
                        method = method,
                        body = body_data,
                        headers = ngx.req.get_headers()
                    })

                    return res
                end

                local api_key_cache = ngx.shared.api_key_cache
                local org_cache = ngx.shared.api_org_cache
                local org_id_cache = ngx.shared.api_org_id_cache
                local api_key = ngx.var.api_key
                local api_daily_count = ngx.shared.api_daily_count
                local api_rate_limit = ngx.shared.api_rate_limit

                -- Check if we have a cache hit
                local cached_value = api_key_cache:get(api_key)

                if cached_value then
                    -- API key is present in cache can proceed with the proxy
                    local org = org_cache:get(api_key)
                    local org_id = org_id_cache:get(api_key)
                    local new_uri = "/" .. cached_value
                    local limit_per_day = api_rate_limit:get(api_key)

                    if limit_per_day ~= 0 then
                        local current_count, err = api_daily_count:incr(api_key, 1, 0, 1 * 60 * 60 * 24)
                        -- Check if the limit has been exceeded
                        if current_count > limit_per_day then
                                -- expire the main cache so it can be reassed
                                api_key_cache:expire(api_key)
                                ngx.status = ngx.HTTP_TOO_MANY_REQUESTS
                                ngx.say("Daily rate limit exceeded for this API key")
                                ngx.exit(ngx.status)
                        end

                    metric_api_cache:inc(1, {"hit"})
                    ngx.req.set_uri(new_uri)

                    local res = processInternalRequest(api_key, cached_value, org, new_uri)

                    if res.status == 200 then
                        metric_requests_api:inc(1, {api_key, org, org_id, cached_value, res.status})
                        ngx.status = res.status
                        for key, value in pairs(res.header) do
                            ngx.header[key] = value  -- Set response headers from captured response
                        end

                        -- Output the captured response body directly to the client
                        ngx.print(res.body)
                        return ngx.exit(ngx.status)
                    else
                        metric_requests_api:inc(1, {api_key, org, org_id, cached_value, res.status})
                        ngx.status = res.status
                        -- ngx.say("Failed to proxy request with status: ", res.status)
                        return ngx.exit(res.status)
                    end
                else
                    -- API key is not in cache attempt to read it from the data base
                    local mysql = require "luasql.mysql"
                    local env = mysql.mysql()

                    local conn, err = env:connect(database_name, db_username, db_password, database_host)

                    if not conn then
                        ngx.status = 500
                        -- ngx.say("Host : ", database_host)
                        -- ngx.say("Failed to connect to database: ", err)
                        return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end

                    local escaped_api_key = ngx.quote_sql_str(api_key)
                    local query = string.format("SELECT * FROM api_keys WHERE `api_key` = %s", escaped_api_key)
                    local cursor = conn:execute(query)
                    local row = cursor:fetch({}, "a")

                    if row then
                        -- API key is present in the database, cache it and proxy the request
                        local chain = row.chain_name
                        local org = row.org_name
                        local org_id = row.org_id
                        local limit = row.limit

                        api_key_cache:set(api_key, chain, 3600)
                        org_cache:set(api_key, org)
                        org_id_cache:set(api_key,org_id)
                        api_rate_limit:set(api_key, limit)

                        usage = api_daily_count:get(api_key)
                        if usage ~= nil then
                            -- don't inc the counter here just assess if it is now below the limit (the limit could have been adjusted)
                            if usage > limit then
                                ngx.status = ngx.HTTP_TOO_MANY_REQUESTS
                                ngx.say("Daily rate limit exceeded for this API key")
                                ngx.exit(ngx.status)
                            end
                        end

                        local new_uri = "/" .. chain

                        ngx.req.set_uri(new_uri)

                        local res = processInternalRequest(api_key, chain, org, new_uri)

                        if res.status == 200 then
                            metric_requests_api:inc(1, {api_key, org, org_id, chain, res.status})
                            ngx.status = res.status
                            for key, value in pairs(res.header) do
                                ngx.header[key] = value  -- Set response headers from captured response
                            end

                            -- Output the captured response body directly to the client
                            ngx.print(res.body)
                            return ngx.exit(ngx.status)
                        else
                            metric_requests_api:inc(1, {api_key, org, org_id, chain, res.status})
                            ngx.status = res.status
                            -- ngx.say("Failed to proxy request with status: ", res.status)
                            return ngx.exit(res.status)
                        end
                    else
                        -- API key is not in the database return a FORBIDDEN status and exit
                        metric_api_cache:inc(1, {"invalid"})
                        ngx.status = 403
                        ngx.say("Invalid API key")
                        return ngx.exit(ngx.HTTP_FORBIDDEN)
                    end

                    cursor:close()
                    conn:close()
                    env:close()
                end
            }
        }

        location /eth {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/eth(.*) /relay/0021${DOLLAR}1 break;    
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }

        location /polygon {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/polygon(.*) /relay/0009${DOLLAR}1 break;    
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }

        location /fuse {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/fuse(.*) /relay/0005${DOLLAR}1 break;      
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }

        location /solana {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/solana(.*) /relay/C006${DOLLAR}1 break;      
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }

        location /bsc {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/bsc(.*) /relay/0004${DOLLAR}1 break;    
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }

        location /base {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/base(.*) /relay/0079${DOLLAR}1 break;    
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }

        location /arb {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/arb(.*) /relay/0066${DOLLAR}1 break;    
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }

        location /dfk {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/dfk(.*) /relay/03DF${DOLLAR}1 break;    
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }

        location /klaytn {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/klaytn(.*) /relay/0056${DOLLAR}1 break;     
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }

        location /near {
            # Allow access only from internal IP addresses
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            rewrite ^/near(.*) /relay/0052${DOLLAR}1 break;     
            proxy_pass http://backend_server;

            # Proxy settings (customize based on your requirements)
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
        }
    }
	
	server {
        listen 9100;
        location /metrics {
            content_by_lua_block {
                prometheus:collect()
            }
        }
	}
}